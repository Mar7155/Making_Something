
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ShippingAddress` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ShippingAddress
 * 
 */
export type ShippingAddressModel = runtime.Types.Result.DefaultSelection<Prisma.$ShippingAddressPayload>

export type AggregateShippingAddress = {
  _count: ShippingAddressCountAggregateOutputType | null
  _min: ShippingAddressMinAggregateOutputType | null
  _max: ShippingAddressMaxAggregateOutputType | null
}

export type ShippingAddressMinAggregateOutputType = {
  id: string | null
  userId: string | null
  extNum: string | null
  intNum: string | null
  street: string | null
  district: string | null
  city: string | null
  state: string | null
  zipCode: string | null
  country: string | null
  isDefault: boolean | null
}

export type ShippingAddressMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  extNum: string | null
  intNum: string | null
  street: string | null
  district: string | null
  city: string | null
  state: string | null
  zipCode: string | null
  country: string | null
  isDefault: boolean | null
}

export type ShippingAddressCountAggregateOutputType = {
  id: number
  userId: number
  extNum: number
  intNum: number
  street: number
  district: number
  city: number
  state: number
  zipCode: number
  country: number
  isDefault: number
  _all: number
}


export type ShippingAddressMinAggregateInputType = {
  id?: true
  userId?: true
  extNum?: true
  intNum?: true
  street?: true
  district?: true
  city?: true
  state?: true
  zipCode?: true
  country?: true
  isDefault?: true
}

export type ShippingAddressMaxAggregateInputType = {
  id?: true
  userId?: true
  extNum?: true
  intNum?: true
  street?: true
  district?: true
  city?: true
  state?: true
  zipCode?: true
  country?: true
  isDefault?: true
}

export type ShippingAddressCountAggregateInputType = {
  id?: true
  userId?: true
  extNum?: true
  intNum?: true
  street?: true
  district?: true
  city?: true
  state?: true
  zipCode?: true
  country?: true
  isDefault?: true
  _all?: true
}

export type ShippingAddressAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ShippingAddress to aggregate.
   */
  where?: Prisma.ShippingAddressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShippingAddresses to fetch.
   */
  orderBy?: Prisma.ShippingAddressOrderByWithRelationInput | Prisma.ShippingAddressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ShippingAddressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShippingAddresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShippingAddresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ShippingAddresses
  **/
  _count?: true | ShippingAddressCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShippingAddressMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShippingAddressMaxAggregateInputType
}

export type GetShippingAddressAggregateType<T extends ShippingAddressAggregateArgs> = {
      [P in keyof T & keyof AggregateShippingAddress]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShippingAddress[P]>
    : Prisma.GetScalarType<T[P], AggregateShippingAddress[P]>
}




export type ShippingAddressGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShippingAddressWhereInput
  orderBy?: Prisma.ShippingAddressOrderByWithAggregationInput | Prisma.ShippingAddressOrderByWithAggregationInput[]
  by: Prisma.ShippingAddressScalarFieldEnum[] | Prisma.ShippingAddressScalarFieldEnum
  having?: Prisma.ShippingAddressScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShippingAddressCountAggregateInputType | true
  _min?: ShippingAddressMinAggregateInputType
  _max?: ShippingAddressMaxAggregateInputType
}

export type ShippingAddressGroupByOutputType = {
  id: string
  userId: string
  extNum: string
  intNum: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country: string
  isDefault: boolean
  _count: ShippingAddressCountAggregateOutputType | null
  _min: ShippingAddressMinAggregateOutputType | null
  _max: ShippingAddressMaxAggregateOutputType | null
}

type GetShippingAddressGroupByPayload<T extends ShippingAddressGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShippingAddressGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShippingAddressGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShippingAddressGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShippingAddressGroupByOutputType[P]>
      }
    >
  >



export type ShippingAddressWhereInput = {
  AND?: Prisma.ShippingAddressWhereInput | Prisma.ShippingAddressWhereInput[]
  OR?: Prisma.ShippingAddressWhereInput[]
  NOT?: Prisma.ShippingAddressWhereInput | Prisma.ShippingAddressWhereInput[]
  id?: Prisma.UuidFilter<"ShippingAddress"> | string
  userId?: Prisma.UuidFilter<"ShippingAddress"> | string
  extNum?: Prisma.StringFilter<"ShippingAddress"> | string
  intNum?: Prisma.StringNullableFilter<"ShippingAddress"> | string | null
  street?: Prisma.StringFilter<"ShippingAddress"> | string
  district?: Prisma.StringFilter<"ShippingAddress"> | string
  city?: Prisma.StringFilter<"ShippingAddress"> | string
  state?: Prisma.StringFilter<"ShippingAddress"> | string
  zipCode?: Prisma.StringFilter<"ShippingAddress"> | string
  country?: Prisma.StringFilter<"ShippingAddress"> | string
  isDefault?: Prisma.BoolFilter<"ShippingAddress"> | boolean
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  shipments?: Prisma.ShipmentListRelationFilter
}

export type ShippingAddressOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  extNum?: Prisma.SortOrder
  intNum?: Prisma.SortOrderInput | Prisma.SortOrder
  street?: Prisma.SortOrder
  district?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  country?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  shipments?: Prisma.ShipmentOrderByRelationAggregateInput
}

export type ShippingAddressWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ShippingAddressWhereInput | Prisma.ShippingAddressWhereInput[]
  OR?: Prisma.ShippingAddressWhereInput[]
  NOT?: Prisma.ShippingAddressWhereInput | Prisma.ShippingAddressWhereInput[]
  userId?: Prisma.UuidFilter<"ShippingAddress"> | string
  extNum?: Prisma.StringFilter<"ShippingAddress"> | string
  intNum?: Prisma.StringNullableFilter<"ShippingAddress"> | string | null
  street?: Prisma.StringFilter<"ShippingAddress"> | string
  district?: Prisma.StringFilter<"ShippingAddress"> | string
  city?: Prisma.StringFilter<"ShippingAddress"> | string
  state?: Prisma.StringFilter<"ShippingAddress"> | string
  zipCode?: Prisma.StringFilter<"ShippingAddress"> | string
  country?: Prisma.StringFilter<"ShippingAddress"> | string
  isDefault?: Prisma.BoolFilter<"ShippingAddress"> | boolean
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  shipments?: Prisma.ShipmentListRelationFilter
}, "id">

export type ShippingAddressOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  extNum?: Prisma.SortOrder
  intNum?: Prisma.SortOrderInput | Prisma.SortOrder
  street?: Prisma.SortOrder
  district?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  country?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
  _count?: Prisma.ShippingAddressCountOrderByAggregateInput
  _max?: Prisma.ShippingAddressMaxOrderByAggregateInput
  _min?: Prisma.ShippingAddressMinOrderByAggregateInput
}

export type ShippingAddressScalarWhereWithAggregatesInput = {
  AND?: Prisma.ShippingAddressScalarWhereWithAggregatesInput | Prisma.ShippingAddressScalarWhereWithAggregatesInput[]
  OR?: Prisma.ShippingAddressScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ShippingAddressScalarWhereWithAggregatesInput | Prisma.ShippingAddressScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ShippingAddress"> | string
  userId?: Prisma.UuidWithAggregatesFilter<"ShippingAddress"> | string
  extNum?: Prisma.StringWithAggregatesFilter<"ShippingAddress"> | string
  intNum?: Prisma.StringNullableWithAggregatesFilter<"ShippingAddress"> | string | null
  street?: Prisma.StringWithAggregatesFilter<"ShippingAddress"> | string
  district?: Prisma.StringWithAggregatesFilter<"ShippingAddress"> | string
  city?: Prisma.StringWithAggregatesFilter<"ShippingAddress"> | string
  state?: Prisma.StringWithAggregatesFilter<"ShippingAddress"> | string
  zipCode?: Prisma.StringWithAggregatesFilter<"ShippingAddress"> | string
  country?: Prisma.StringWithAggregatesFilter<"ShippingAddress"> | string
  isDefault?: Prisma.BoolWithAggregatesFilter<"ShippingAddress"> | boolean
}

export type ShippingAddressCreateInput = {
  id?: string
  extNum: string
  intNum?: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country?: string
  isDefault?: boolean
  user: Prisma.UserCreateNestedOneWithoutShippingAddressesInput
  shipments?: Prisma.ShipmentCreateNestedManyWithoutAddressInput
}

export type ShippingAddressUncheckedCreateInput = {
  id?: string
  userId: string
  extNum: string
  intNum?: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country?: string
  isDefault?: boolean
  shipments?: Prisma.ShipmentUncheckedCreateNestedManyWithoutAddressInput
}

export type ShippingAddressUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutShippingAddressesNestedInput
  shipments?: Prisma.ShipmentUpdateManyWithoutAddressNestedInput
}

export type ShippingAddressUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shipments?: Prisma.ShipmentUncheckedUpdateManyWithoutAddressNestedInput
}

export type ShippingAddressCreateManyInput = {
  id?: string
  userId: string
  extNum: string
  intNum?: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country?: string
  isDefault?: boolean
}

export type ShippingAddressUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ShippingAddressUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ShippingAddressListRelationFilter = {
  every?: Prisma.ShippingAddressWhereInput
  some?: Prisma.ShippingAddressWhereInput
  none?: Prisma.ShippingAddressWhereInput
}

export type ShippingAddressOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ShippingAddressCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  extNum?: Prisma.SortOrder
  intNum?: Prisma.SortOrder
  street?: Prisma.SortOrder
  district?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  country?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
}

export type ShippingAddressMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  extNum?: Prisma.SortOrder
  intNum?: Prisma.SortOrder
  street?: Prisma.SortOrder
  district?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  country?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
}

export type ShippingAddressMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  extNum?: Prisma.SortOrder
  intNum?: Prisma.SortOrder
  street?: Prisma.SortOrder
  district?: Prisma.SortOrder
  city?: Prisma.SortOrder
  state?: Prisma.SortOrder
  zipCode?: Prisma.SortOrder
  country?: Prisma.SortOrder
  isDefault?: Prisma.SortOrder
}

export type ShippingAddressNullableScalarRelationFilter = {
  is?: Prisma.ShippingAddressWhereInput | null
  isNot?: Prisma.ShippingAddressWhereInput | null
}

export type ShippingAddressCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ShippingAddressCreateWithoutUserInput, Prisma.ShippingAddressUncheckedCreateWithoutUserInput> | Prisma.ShippingAddressCreateWithoutUserInput[] | Prisma.ShippingAddressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShippingAddressCreateOrConnectWithoutUserInput | Prisma.ShippingAddressCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ShippingAddressCreateManyUserInputEnvelope
  connect?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
}

export type ShippingAddressUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ShippingAddressCreateWithoutUserInput, Prisma.ShippingAddressUncheckedCreateWithoutUserInput> | Prisma.ShippingAddressCreateWithoutUserInput[] | Prisma.ShippingAddressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShippingAddressCreateOrConnectWithoutUserInput | Prisma.ShippingAddressCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ShippingAddressCreateManyUserInputEnvelope
  connect?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
}

export type ShippingAddressUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ShippingAddressCreateWithoutUserInput, Prisma.ShippingAddressUncheckedCreateWithoutUserInput> | Prisma.ShippingAddressCreateWithoutUserInput[] | Prisma.ShippingAddressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShippingAddressCreateOrConnectWithoutUserInput | Prisma.ShippingAddressCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ShippingAddressUpsertWithWhereUniqueWithoutUserInput | Prisma.ShippingAddressUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ShippingAddressCreateManyUserInputEnvelope
  set?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
  disconnect?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
  delete?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
  connect?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
  update?: Prisma.ShippingAddressUpdateWithWhereUniqueWithoutUserInput | Prisma.ShippingAddressUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ShippingAddressUpdateManyWithWhereWithoutUserInput | Prisma.ShippingAddressUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ShippingAddressScalarWhereInput | Prisma.ShippingAddressScalarWhereInput[]
}

export type ShippingAddressUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ShippingAddressCreateWithoutUserInput, Prisma.ShippingAddressUncheckedCreateWithoutUserInput> | Prisma.ShippingAddressCreateWithoutUserInput[] | Prisma.ShippingAddressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ShippingAddressCreateOrConnectWithoutUserInput | Prisma.ShippingAddressCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ShippingAddressUpsertWithWhereUniqueWithoutUserInput | Prisma.ShippingAddressUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ShippingAddressCreateManyUserInputEnvelope
  set?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
  disconnect?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
  delete?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
  connect?: Prisma.ShippingAddressWhereUniqueInput | Prisma.ShippingAddressWhereUniqueInput[]
  update?: Prisma.ShippingAddressUpdateWithWhereUniqueWithoutUserInput | Prisma.ShippingAddressUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ShippingAddressUpdateManyWithWhereWithoutUserInput | Prisma.ShippingAddressUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ShippingAddressScalarWhereInput | Prisma.ShippingAddressScalarWhereInput[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type ShippingAddressCreateNestedOneWithoutShipmentsInput = {
  create?: Prisma.XOR<Prisma.ShippingAddressCreateWithoutShipmentsInput, Prisma.ShippingAddressUncheckedCreateWithoutShipmentsInput>
  connectOrCreate?: Prisma.ShippingAddressCreateOrConnectWithoutShipmentsInput
  connect?: Prisma.ShippingAddressWhereUniqueInput
}

export type ShippingAddressUpdateOneWithoutShipmentsNestedInput = {
  create?: Prisma.XOR<Prisma.ShippingAddressCreateWithoutShipmentsInput, Prisma.ShippingAddressUncheckedCreateWithoutShipmentsInput>
  connectOrCreate?: Prisma.ShippingAddressCreateOrConnectWithoutShipmentsInput
  upsert?: Prisma.ShippingAddressUpsertWithoutShipmentsInput
  disconnect?: Prisma.ShippingAddressWhereInput | boolean
  delete?: Prisma.ShippingAddressWhereInput | boolean
  connect?: Prisma.ShippingAddressWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ShippingAddressUpdateToOneWithWhereWithoutShipmentsInput, Prisma.ShippingAddressUpdateWithoutShipmentsInput>, Prisma.ShippingAddressUncheckedUpdateWithoutShipmentsInput>
}

export type ShippingAddressCreateWithoutUserInput = {
  id?: string
  extNum: string
  intNum?: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country?: string
  isDefault?: boolean
  shipments?: Prisma.ShipmentCreateNestedManyWithoutAddressInput
}

export type ShippingAddressUncheckedCreateWithoutUserInput = {
  id?: string
  extNum: string
  intNum?: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country?: string
  isDefault?: boolean
  shipments?: Prisma.ShipmentUncheckedCreateNestedManyWithoutAddressInput
}

export type ShippingAddressCreateOrConnectWithoutUserInput = {
  where: Prisma.ShippingAddressWhereUniqueInput
  create: Prisma.XOR<Prisma.ShippingAddressCreateWithoutUserInput, Prisma.ShippingAddressUncheckedCreateWithoutUserInput>
}

export type ShippingAddressCreateManyUserInputEnvelope = {
  data: Prisma.ShippingAddressCreateManyUserInput | Prisma.ShippingAddressCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ShippingAddressUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ShippingAddressWhereUniqueInput
  update: Prisma.XOR<Prisma.ShippingAddressUpdateWithoutUserInput, Prisma.ShippingAddressUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ShippingAddressCreateWithoutUserInput, Prisma.ShippingAddressUncheckedCreateWithoutUserInput>
}

export type ShippingAddressUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ShippingAddressWhereUniqueInput
  data: Prisma.XOR<Prisma.ShippingAddressUpdateWithoutUserInput, Prisma.ShippingAddressUncheckedUpdateWithoutUserInput>
}

export type ShippingAddressUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ShippingAddressScalarWhereInput
  data: Prisma.XOR<Prisma.ShippingAddressUpdateManyMutationInput, Prisma.ShippingAddressUncheckedUpdateManyWithoutUserInput>
}

export type ShippingAddressScalarWhereInput = {
  AND?: Prisma.ShippingAddressScalarWhereInput | Prisma.ShippingAddressScalarWhereInput[]
  OR?: Prisma.ShippingAddressScalarWhereInput[]
  NOT?: Prisma.ShippingAddressScalarWhereInput | Prisma.ShippingAddressScalarWhereInput[]
  id?: Prisma.UuidFilter<"ShippingAddress"> | string
  userId?: Prisma.UuidFilter<"ShippingAddress"> | string
  extNum?: Prisma.StringFilter<"ShippingAddress"> | string
  intNum?: Prisma.StringNullableFilter<"ShippingAddress"> | string | null
  street?: Prisma.StringFilter<"ShippingAddress"> | string
  district?: Prisma.StringFilter<"ShippingAddress"> | string
  city?: Prisma.StringFilter<"ShippingAddress"> | string
  state?: Prisma.StringFilter<"ShippingAddress"> | string
  zipCode?: Prisma.StringFilter<"ShippingAddress"> | string
  country?: Prisma.StringFilter<"ShippingAddress"> | string
  isDefault?: Prisma.BoolFilter<"ShippingAddress"> | boolean
}

export type ShippingAddressCreateWithoutShipmentsInput = {
  id?: string
  extNum: string
  intNum?: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country?: string
  isDefault?: boolean
  user: Prisma.UserCreateNestedOneWithoutShippingAddressesInput
}

export type ShippingAddressUncheckedCreateWithoutShipmentsInput = {
  id?: string
  userId: string
  extNum: string
  intNum?: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country?: string
  isDefault?: boolean
}

export type ShippingAddressCreateOrConnectWithoutShipmentsInput = {
  where: Prisma.ShippingAddressWhereUniqueInput
  create: Prisma.XOR<Prisma.ShippingAddressCreateWithoutShipmentsInput, Prisma.ShippingAddressUncheckedCreateWithoutShipmentsInput>
}

export type ShippingAddressUpsertWithoutShipmentsInput = {
  update: Prisma.XOR<Prisma.ShippingAddressUpdateWithoutShipmentsInput, Prisma.ShippingAddressUncheckedUpdateWithoutShipmentsInput>
  create: Prisma.XOR<Prisma.ShippingAddressCreateWithoutShipmentsInput, Prisma.ShippingAddressUncheckedCreateWithoutShipmentsInput>
  where?: Prisma.ShippingAddressWhereInput
}

export type ShippingAddressUpdateToOneWithWhereWithoutShipmentsInput = {
  where?: Prisma.ShippingAddressWhereInput
  data: Prisma.XOR<Prisma.ShippingAddressUpdateWithoutShipmentsInput, Prisma.ShippingAddressUncheckedUpdateWithoutShipmentsInput>
}

export type ShippingAddressUpdateWithoutShipmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  user?: Prisma.UserUpdateOneRequiredWithoutShippingAddressesNestedInput
}

export type ShippingAddressUncheckedUpdateWithoutShipmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type ShippingAddressCreateManyUserInput = {
  id?: string
  extNum: string
  intNum?: string | null
  street: string
  district: string
  city: string
  state: string
  zipCode: string
  country?: string
  isDefault?: boolean
}

export type ShippingAddressUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shipments?: Prisma.ShipmentUpdateManyWithoutAddressNestedInput
}

export type ShippingAddressUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
  shipments?: Prisma.ShipmentUncheckedUpdateManyWithoutAddressNestedInput
}

export type ShippingAddressUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  extNum?: Prisma.StringFieldUpdateOperationsInput | string
  intNum?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  street?: Prisma.StringFieldUpdateOperationsInput | string
  district?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  state?: Prisma.StringFieldUpdateOperationsInput | string
  zipCode?: Prisma.StringFieldUpdateOperationsInput | string
  country?: Prisma.StringFieldUpdateOperationsInput | string
  isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
}


/**
 * Count Type ShippingAddressCountOutputType
 */

export type ShippingAddressCountOutputType = {
  shipments: number
}

export type ShippingAddressCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  shipments?: boolean | ShippingAddressCountOutputTypeCountShipmentsArgs
}

/**
 * ShippingAddressCountOutputType without action
 */
export type ShippingAddressCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddressCountOutputType
   */
  select?: Prisma.ShippingAddressCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ShippingAddressCountOutputType without action
 */
export type ShippingAddressCountOutputTypeCountShipmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShipmentWhereInput
}


export type ShippingAddressSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  extNum?: boolean
  intNum?: boolean
  street?: boolean
  district?: boolean
  city?: boolean
  state?: boolean
  zipCode?: boolean
  country?: boolean
  isDefault?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  shipments?: boolean | Prisma.ShippingAddress$shipmentsArgs<ExtArgs>
  _count?: boolean | Prisma.ShippingAddressCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shippingAddress"]>

export type ShippingAddressSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  extNum?: boolean
  intNum?: boolean
  street?: boolean
  district?: boolean
  city?: boolean
  state?: boolean
  zipCode?: boolean
  country?: boolean
  isDefault?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shippingAddress"]>

export type ShippingAddressSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  extNum?: boolean
  intNum?: boolean
  street?: boolean
  district?: boolean
  city?: boolean
  state?: boolean
  zipCode?: boolean
  country?: boolean
  isDefault?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shippingAddress"]>

export type ShippingAddressSelectScalar = {
  id?: boolean
  userId?: boolean
  extNum?: boolean
  intNum?: boolean
  street?: boolean
  district?: boolean
  city?: boolean
  state?: boolean
  zipCode?: boolean
  country?: boolean
  isDefault?: boolean
}

export type ShippingAddressOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "extNum" | "intNum" | "street" | "district" | "city" | "state" | "zipCode" | "country" | "isDefault", ExtArgs["result"]["shippingAddress"]>
export type ShippingAddressInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  shipments?: boolean | Prisma.ShippingAddress$shipmentsArgs<ExtArgs>
  _count?: boolean | Prisma.ShippingAddressCountOutputTypeDefaultArgs<ExtArgs>
}
export type ShippingAddressIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ShippingAddressIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ShippingAddressPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ShippingAddress"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    shipments: Prisma.$ShipmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    extNum: string
    intNum: string | null
    street: string
    district: string
    city: string
    state: string
    zipCode: string
    country: string
    isDefault: boolean
  }, ExtArgs["result"]["shippingAddress"]>
  composites: {}
}

export type ShippingAddressGetPayload<S extends boolean | null | undefined | ShippingAddressDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload, S>

export type ShippingAddressCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ShippingAddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShippingAddressCountAggregateInputType | true
  }

export interface ShippingAddressDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShippingAddress'], meta: { name: 'ShippingAddress' } }
  /**
   * Find zero or one ShippingAddress that matches the filter.
   * @param {ShippingAddressFindUniqueArgs} args - Arguments to find a ShippingAddress
   * @example
   * // Get one ShippingAddress
   * const shippingAddress = await prisma.shippingAddress.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShippingAddressFindUniqueArgs>(args: Prisma.SelectSubset<T, ShippingAddressFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ShippingAddressClient<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ShippingAddress that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShippingAddressFindUniqueOrThrowArgs} args - Arguments to find a ShippingAddress
   * @example
   * // Get one ShippingAddress
   * const shippingAddress = await prisma.shippingAddress.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShippingAddressFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ShippingAddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShippingAddressClient<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ShippingAddress that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingAddressFindFirstArgs} args - Arguments to find a ShippingAddress
   * @example
   * // Get one ShippingAddress
   * const shippingAddress = await prisma.shippingAddress.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShippingAddressFindFirstArgs>(args?: Prisma.SelectSubset<T, ShippingAddressFindFirstArgs<ExtArgs>>): Prisma.Prisma__ShippingAddressClient<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ShippingAddress that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingAddressFindFirstOrThrowArgs} args - Arguments to find a ShippingAddress
   * @example
   * // Get one ShippingAddress
   * const shippingAddress = await prisma.shippingAddress.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShippingAddressFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ShippingAddressFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShippingAddressClient<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ShippingAddresses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingAddressFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ShippingAddresses
   * const shippingAddresses = await prisma.shippingAddress.findMany()
   * 
   * // Get first 10 ShippingAddresses
   * const shippingAddresses = await prisma.shippingAddress.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const shippingAddressWithIdOnly = await prisma.shippingAddress.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ShippingAddressFindManyArgs>(args?: Prisma.SelectSubset<T, ShippingAddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ShippingAddress.
   * @param {ShippingAddressCreateArgs} args - Arguments to create a ShippingAddress.
   * @example
   * // Create one ShippingAddress
   * const ShippingAddress = await prisma.shippingAddress.create({
   *   data: {
   *     // ... data to create a ShippingAddress
   *   }
   * })
   * 
   */
  create<T extends ShippingAddressCreateArgs>(args: Prisma.SelectSubset<T, ShippingAddressCreateArgs<ExtArgs>>): Prisma.Prisma__ShippingAddressClient<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ShippingAddresses.
   * @param {ShippingAddressCreateManyArgs} args - Arguments to create many ShippingAddresses.
   * @example
   * // Create many ShippingAddresses
   * const shippingAddress = await prisma.shippingAddress.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ShippingAddressCreateManyArgs>(args?: Prisma.SelectSubset<T, ShippingAddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ShippingAddresses and returns the data saved in the database.
   * @param {ShippingAddressCreateManyAndReturnArgs} args - Arguments to create many ShippingAddresses.
   * @example
   * // Create many ShippingAddresses
   * const shippingAddress = await prisma.shippingAddress.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ShippingAddresses and only return the `id`
   * const shippingAddressWithIdOnly = await prisma.shippingAddress.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ShippingAddressCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ShippingAddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ShippingAddress.
   * @param {ShippingAddressDeleteArgs} args - Arguments to delete one ShippingAddress.
   * @example
   * // Delete one ShippingAddress
   * const ShippingAddress = await prisma.shippingAddress.delete({
   *   where: {
   *     // ... filter to delete one ShippingAddress
   *   }
   * })
   * 
   */
  delete<T extends ShippingAddressDeleteArgs>(args: Prisma.SelectSubset<T, ShippingAddressDeleteArgs<ExtArgs>>): Prisma.Prisma__ShippingAddressClient<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ShippingAddress.
   * @param {ShippingAddressUpdateArgs} args - Arguments to update one ShippingAddress.
   * @example
   * // Update one ShippingAddress
   * const shippingAddress = await prisma.shippingAddress.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ShippingAddressUpdateArgs>(args: Prisma.SelectSubset<T, ShippingAddressUpdateArgs<ExtArgs>>): Prisma.Prisma__ShippingAddressClient<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ShippingAddresses.
   * @param {ShippingAddressDeleteManyArgs} args - Arguments to filter ShippingAddresses to delete.
   * @example
   * // Delete a few ShippingAddresses
   * const { count } = await prisma.shippingAddress.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ShippingAddressDeleteManyArgs>(args?: Prisma.SelectSubset<T, ShippingAddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ShippingAddresses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingAddressUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ShippingAddresses
   * const shippingAddress = await prisma.shippingAddress.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ShippingAddressUpdateManyArgs>(args: Prisma.SelectSubset<T, ShippingAddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ShippingAddresses and returns the data updated in the database.
   * @param {ShippingAddressUpdateManyAndReturnArgs} args - Arguments to update many ShippingAddresses.
   * @example
   * // Update many ShippingAddresses
   * const shippingAddress = await prisma.shippingAddress.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ShippingAddresses and only return the `id`
   * const shippingAddressWithIdOnly = await prisma.shippingAddress.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ShippingAddressUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ShippingAddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ShippingAddress.
   * @param {ShippingAddressUpsertArgs} args - Arguments to update or create a ShippingAddress.
   * @example
   * // Update or create a ShippingAddress
   * const shippingAddress = await prisma.shippingAddress.upsert({
   *   create: {
   *     // ... data to create a ShippingAddress
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ShippingAddress we want to update
   *   }
   * })
   */
  upsert<T extends ShippingAddressUpsertArgs>(args: Prisma.SelectSubset<T, ShippingAddressUpsertArgs<ExtArgs>>): Prisma.Prisma__ShippingAddressClient<runtime.Types.Result.GetResult<Prisma.$ShippingAddressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ShippingAddresses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingAddressCountArgs} args - Arguments to filter ShippingAddresses to count.
   * @example
   * // Count the number of ShippingAddresses
   * const count = await prisma.shippingAddress.count({
   *   where: {
   *     // ... the filter for the ShippingAddresses we want to count
   *   }
   * })
  **/
  count<T extends ShippingAddressCountArgs>(
    args?: Prisma.Subset<T, ShippingAddressCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShippingAddressCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ShippingAddress.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShippingAddressAggregateArgs>(args: Prisma.Subset<T, ShippingAddressAggregateArgs>): Prisma.PrismaPromise<GetShippingAddressAggregateType<T>>

  /**
   * Group by ShippingAddress.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShippingAddressGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ShippingAddressGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShippingAddressGroupByArgs['orderBy'] }
      : { orderBy?: ShippingAddressGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ShippingAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShippingAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ShippingAddress model
 */
readonly fields: ShippingAddressFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ShippingAddress.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShippingAddressClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  shipments<T extends Prisma.ShippingAddress$shipmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ShippingAddress$shipmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShipmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ShippingAddress model
 */
export interface ShippingAddressFieldRefs {
  readonly id: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly userId: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly extNum: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly intNum: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly street: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly district: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly city: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly state: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly zipCode: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly country: Prisma.FieldRef<"ShippingAddress", 'String'>
  readonly isDefault: Prisma.FieldRef<"ShippingAddress", 'Boolean'>
}
    

// Custom InputTypes
/**
 * ShippingAddress findUnique
 */
export type ShippingAddressFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * Filter, which ShippingAddress to fetch.
   */
  where: Prisma.ShippingAddressWhereUniqueInput
}

/**
 * ShippingAddress findUniqueOrThrow
 */
export type ShippingAddressFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * Filter, which ShippingAddress to fetch.
   */
  where: Prisma.ShippingAddressWhereUniqueInput
}

/**
 * ShippingAddress findFirst
 */
export type ShippingAddressFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * Filter, which ShippingAddress to fetch.
   */
  where?: Prisma.ShippingAddressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShippingAddresses to fetch.
   */
  orderBy?: Prisma.ShippingAddressOrderByWithRelationInput | Prisma.ShippingAddressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ShippingAddresses.
   */
  cursor?: Prisma.ShippingAddressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShippingAddresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShippingAddresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ShippingAddresses.
   */
  distinct?: Prisma.ShippingAddressScalarFieldEnum | Prisma.ShippingAddressScalarFieldEnum[]
}

/**
 * ShippingAddress findFirstOrThrow
 */
export type ShippingAddressFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * Filter, which ShippingAddress to fetch.
   */
  where?: Prisma.ShippingAddressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShippingAddresses to fetch.
   */
  orderBy?: Prisma.ShippingAddressOrderByWithRelationInput | Prisma.ShippingAddressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ShippingAddresses.
   */
  cursor?: Prisma.ShippingAddressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShippingAddresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShippingAddresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ShippingAddresses.
   */
  distinct?: Prisma.ShippingAddressScalarFieldEnum | Prisma.ShippingAddressScalarFieldEnum[]
}

/**
 * ShippingAddress findMany
 */
export type ShippingAddressFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * Filter, which ShippingAddresses to fetch.
   */
  where?: Prisma.ShippingAddressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ShippingAddresses to fetch.
   */
  orderBy?: Prisma.ShippingAddressOrderByWithRelationInput | Prisma.ShippingAddressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ShippingAddresses.
   */
  cursor?: Prisma.ShippingAddressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ShippingAddresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ShippingAddresses.
   */
  skip?: number
  distinct?: Prisma.ShippingAddressScalarFieldEnum | Prisma.ShippingAddressScalarFieldEnum[]
}

/**
 * ShippingAddress create
 */
export type ShippingAddressCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * The data needed to create a ShippingAddress.
   */
  data: Prisma.XOR<Prisma.ShippingAddressCreateInput, Prisma.ShippingAddressUncheckedCreateInput>
}

/**
 * ShippingAddress createMany
 */
export type ShippingAddressCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ShippingAddresses.
   */
  data: Prisma.ShippingAddressCreateManyInput | Prisma.ShippingAddressCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ShippingAddress createManyAndReturn
 */
export type ShippingAddressCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * The data used to create many ShippingAddresses.
   */
  data: Prisma.ShippingAddressCreateManyInput | Prisma.ShippingAddressCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ShippingAddress update
 */
export type ShippingAddressUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * The data needed to update a ShippingAddress.
   */
  data: Prisma.XOR<Prisma.ShippingAddressUpdateInput, Prisma.ShippingAddressUncheckedUpdateInput>
  /**
   * Choose, which ShippingAddress to update.
   */
  where: Prisma.ShippingAddressWhereUniqueInput
}

/**
 * ShippingAddress updateMany
 */
export type ShippingAddressUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ShippingAddresses.
   */
  data: Prisma.XOR<Prisma.ShippingAddressUpdateManyMutationInput, Prisma.ShippingAddressUncheckedUpdateManyInput>
  /**
   * Filter which ShippingAddresses to update
   */
  where?: Prisma.ShippingAddressWhereInput
  /**
   * Limit how many ShippingAddresses to update.
   */
  limit?: number
}

/**
 * ShippingAddress updateManyAndReturn
 */
export type ShippingAddressUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * The data used to update ShippingAddresses.
   */
  data: Prisma.XOR<Prisma.ShippingAddressUpdateManyMutationInput, Prisma.ShippingAddressUncheckedUpdateManyInput>
  /**
   * Filter which ShippingAddresses to update
   */
  where?: Prisma.ShippingAddressWhereInput
  /**
   * Limit how many ShippingAddresses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ShippingAddress upsert
 */
export type ShippingAddressUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * The filter to search for the ShippingAddress to update in case it exists.
   */
  where: Prisma.ShippingAddressWhereUniqueInput
  /**
   * In case the ShippingAddress found by the `where` argument doesn't exist, create a new ShippingAddress with this data.
   */
  create: Prisma.XOR<Prisma.ShippingAddressCreateInput, Prisma.ShippingAddressUncheckedCreateInput>
  /**
   * In case the ShippingAddress was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ShippingAddressUpdateInput, Prisma.ShippingAddressUncheckedUpdateInput>
}

/**
 * ShippingAddress delete
 */
export type ShippingAddressDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
  /**
   * Filter which ShippingAddress to delete.
   */
  where: Prisma.ShippingAddressWhereUniqueInput
}

/**
 * ShippingAddress deleteMany
 */
export type ShippingAddressDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ShippingAddresses to delete
   */
  where?: Prisma.ShippingAddressWhereInput
  /**
   * Limit how many ShippingAddresses to delete.
   */
  limit?: number
}

/**
 * ShippingAddress.shipments
 */
export type ShippingAddress$shipmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shipment
   */
  select?: Prisma.ShipmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shipment
   */
  omit?: Prisma.ShipmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShipmentInclude<ExtArgs> | null
  where?: Prisma.ShipmentWhereInput
  orderBy?: Prisma.ShipmentOrderByWithRelationInput | Prisma.ShipmentOrderByWithRelationInput[]
  cursor?: Prisma.ShipmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ShipmentScalarFieldEnum | Prisma.ShipmentScalarFieldEnum[]
}

/**
 * ShippingAddress without action
 */
export type ShippingAddressDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShippingAddress
   */
  select?: Prisma.ShippingAddressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShippingAddress
   */
  omit?: Prisma.ShippingAddressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShippingAddressInclude<ExtArgs> | null
}
